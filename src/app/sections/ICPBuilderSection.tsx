'use client';

import React, { useState } from 'react';
import { Users, Target, TrendingUp, Brain, Download, Copy, Check, Loader2, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface ICPAnalysis {
  customerPatterns: {
    demographics: string[];
    psychographics: string[];
    behaviors: string[];
    painPoints: string[];
  };
  idealProfile: {
    companySize: string;
    industry: string[];
    revenue: string;
    geography: string[];
    decisionMakers: string[];
  };
  buyingSignals: {
    triggers: string[];
    timing: string[];
    channels: string[];
  };
  recommendations: {
    prospecting: string[];
    messaging: string[];
    channels: string[];
    timing: string[];
  };
  summary: string;
}

export function ICPBuilderSection() {
  const [customers, setCustomers] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState<ICPAnalysis | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [copiedSection, setCopiedSection] = useState<string | null>(null);

  const handleAnalyze = async () => {
    if (!customers.trim()) {
      setError('Please enter at least one customer example');
      return;
    }

    setIsAnalyzing(true);
    setError(null);

    try {
      const response = await fetch('/api/tools/icp-builder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ customers: customers.trim() })
      });

      if (!response.ok) {
        throw new Error(`Analysis failed: ${response.statusText}`);
      }

      const data = await response.json();
      setAnalysis(data);
    } catch (err) {
      console.error('ICP Analysis error:', err);
      setError(err instanceof Error ? err.message : 'Analysis failed. Please try again.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const copyToClipboard = (text: string, section: string) => {
    navigator.clipboard.writeText(text);
    setCopiedSection(section);
    setTimeout(() => setCopiedSection(null), 2000);
  };

  const downloadReport = () => {
    if (!analysis) return;

    const report = `
IDEAL CUSTOMER PROFILE ANALYSIS REPORT
=====================================

CUSTOMER PATTERNS
-----------------
Demographics:
${analysis.customerPatterns.demographics.map(item => `• ${item}`).join('\n')}

Psychographics:
${analysis.customerPatterns.psychographics.map(item => `• ${item}`).join('\n')}

Behaviors:
${analysis.customerPatterns.behaviors.map(item => `• ${item}`).join('\n')}

Pain Points:
${analysis.customerPatterns.painPoints.map(item => `• ${item}`).join('\n')}

IDEAL PROFILE
-------------
Company Size: ${analysis.idealProfile.companySize}
Industries: ${analysis.idealProfile.industry.join(', ')}
Revenue: ${analysis.idealProfile.revenue}
Geography: ${analysis.idealProfile.geography.join(', ')}
Decision Makers: ${analysis.idealProfile.decisionMakers.join(', ')}

BUYING SIGNALS
--------------
Triggers:
${analysis.buyingSignals.triggers.map(item => `• ${item}`).join('\n')}

Timing:
${analysis.buyingSignals.timing.map(item => `• ${item}`).join('\n')}

Channels:
${analysis.buyingSignals.channels.map(item => `• ${item}`).join('\n')}

RECOMMENDATIONS
---------------
Prospecting:
${analysis.recommendations.prospecting.map(item => `• ${item}`).join('\n')}

Messaging:
${analysis.recommendations.messaging.map(item => `• ${item}`).join('\n')}

Channels:
${analysis.recommendations.channels.map(item => `• ${item}`).join('\n')}

Timing:
${analysis.recommendations.timing.map(item => `• ${item}`).join('\n')}

SUMMARY
-------
${analysis.summary}

Generated by Ahmad Basheer's AI Solutions Portfolio
    `.trim();

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'icp-analysis-report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-[#0a0a0a] text-white">
      {/* Header */}
      <div className="border-b border-[#333333] bg-[#0a0a0a] p-6">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center gap-4 mb-4">
            <div className="p-3 bg-purple-600 rounded-xl">
              <Users className="h-8 w-8" />
            </div>
            <div>
              <h1 className="text-3xl font-bold">Ideal Customer Profile Builder</h1>
              <p className="text-gray-400 text-lg">
                AI-powered analysis to identify your perfect customers and accelerate sales
              </p>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-[#111111] border border-[#333333] rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Target className="h-5 w-5 text-purple-400" />
                <span className="font-semibold">Pattern Recognition</span>
              </div>
              <p className="text-sm text-gray-400">Analyzes successful customers to reveal hidden patterns</p>
            </div>
            
            <div className="bg-[#111111] border border-[#333333] rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Brain className="h-5 w-5 text-purple-400" />
                <span className="font-semibold">AI Insights</span>
              </div>
              <p className="text-sm text-gray-400">Leverages LLMs for deep customer intelligence</p>
            </div>
            
            <div className="bg-[#111111] border border-[#333333] rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <TrendingUp className="h-5 w-5 text-purple-400" />
                <span className="font-semibold">Actionable Results</span>
              </div>
              <p className="text-sm text-gray-400">Get specific recommendations for prospecting</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto p-6">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Section */}
          <div className="space-y-6">
            <Card className="bg-[#111111] border-[#333333]">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Users className="h-5 w-5 text-purple-400" />
                  Customer Examples
                </CardTitle>
                <CardDescription className="text-gray-400">
                  Enter your best customers (one per line). Include names, companies, LinkedIn profiles, or URLs.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Textarea
                  value={customers}
                  onChange={(e) => setCustomers(e.target.value)}
                  placeholder={`Ahmad Basheer - Assisted.vip
John Smith - TechCorp Inc
https://linkedin.com/in/jane-doe
Sarah Johnson, CEO at DataFlow Solutions`}
                  className="min-h-[200px] bg-[#0a0a0a] border-[#333333] text-white resize-none"
                />
                
                {error && (
                  <div className="flex items-center gap-2 text-red-400 text-sm">
                    <AlertCircle className="h-4 w-4" />
                    {error}
                  </div>
                )}
                
                <Button
                  onClick={handleAnalyze}
                  disabled={isAnalyzing || !customers.trim()}
                  className="w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3"
                >
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Analyzing Customer Patterns...
                    </>
                  ) : (
                    <>
                      <Brain className="h-4 w-4 mr-2" />
                      Build My ICP
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>

            {/* How It Works */}
            <Card className="bg-[#111111] border-[#333333]">
              <CardHeader>
                <CardTitle className="text-white text-lg">How It Works</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-white text-xs font-bold">1</span>
                  </div>
                  <div>
                    <p className="text-white font-medium">Pattern Analysis</p>
                    <p className="text-sm text-gray-400">AI analyzes your customer data to identify common traits</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-white text-xs font-bold">2</span>
                  </div>
                  <div>
                    <p className="text-white font-medium">Profile Creation</p>
                    <p className="text-sm text-gray-400">Builds comprehensive ICP with demographics and behaviors</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-white text-xs font-bold">3</span>
                  </div>
                  <div>
                    <p className="text-white font-medium">Actionable Insights</p>
                    <p className="text-sm text-gray-400">Provides specific recommendations for finding similar prospects</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Results Section */}
          <div className="space-y-6">
            {analysis ? (
              <div className="space-y-6">
                {/* Action Buttons */}
                <div className="flex gap-3">
                  <Button
                    onClick={downloadReport}
                    className="bg-[#333333] hover:bg-[#444444] text-white"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download Report
                  </Button>
                </div>

                {/* Results Tabs */}
                <Tabs defaultValue="patterns" className="w-full">
                  <TabsList className="grid w-full grid-cols-4 bg-[#111111] border border-[#333333]">
                    <TabsTrigger value="patterns" className="data-[state=active]:bg-purple-600">Patterns</TabsTrigger>
                    <TabsTrigger value="profile" className="data-[state=active]:bg-purple-600">Profile</TabsTrigger>
                    <TabsTrigger value="signals" className="data-[state=active]:bg-purple-600">Signals</TabsTrigger>
                    <TabsTrigger value="recommendations" className="data-[state=active]:bg-purple-600">Actions</TabsTrigger>
                  </TabsList>

                  <TabsContent value="patterns" className="space-y-4">
                    <Card className="bg-[#111111] border-[#333333]">
                      <CardHeader className="flex flex-row items-center justify-between">
                        <CardTitle className="text-white">Customer Patterns</CardTitle>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => copyToClipboard(JSON.stringify(analysis.customerPatterns, null, 2), 'patterns')}
                        >
                          {copiedSection === 'patterns' ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                        </Button>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Demographics</h4>
                          <ul className="space-y-1">
                            {analysis.customerPatterns.demographics.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Psychographics</h4>
                          <ul className="space-y-1">
                            {analysis.customerPatterns.psychographics.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Behaviors</h4>
                          <ul className="space-y-1">
                            {analysis.customerPatterns.behaviors.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Pain Points</h4>
                          <ul className="space-y-1">
                            {analysis.customerPatterns.painPoints.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>

                  <TabsContent value="profile" className="space-y-4">
                    <Card className="bg-[#111111] border-[#333333]">
                      <CardHeader className="flex flex-row items-center justify-between">
                        <CardTitle className="text-white">Ideal Customer Profile</CardTitle>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => copyToClipboard(JSON.stringify(analysis.idealProfile, null, 2), 'profile')}
                        >
                          {copiedSection === 'profile' ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                        </Button>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <h4 className="font-semibold text-purple-400 mb-2">Company Size</h4>
                            <p className="text-sm text-gray-300">{analysis.idealProfile.companySize}</p>
                          </div>
                          
                          <div>
                            <h4 className="font-semibold text-purple-400 mb-2">Revenue</h4>
                            <p className="text-sm text-gray-300">{analysis.idealProfile.revenue}</p>
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Industries</h4>
                          <div className="flex flex-wrap gap-2">
                            {analysis.idealProfile.industry.map((item, index) => (
                              <span key={index} className="px-2 py-1 bg-[#333333] text-gray-300 text-xs rounded">
                                {item}
                              </span>
                            ))}
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Geography</h4>
                          <div className="flex flex-wrap gap-2">
                            {analysis.idealProfile.geography.map((item, index) => (
                              <span key={index} className="px-2 py-1 bg-[#333333] text-gray-300 text-xs rounded">
                                {item}
                              </span>
                            ))}
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Decision Makers</h4>
                          <div className="flex flex-wrap gap-2">
                            {analysis.idealProfile.decisionMakers.map((item, index) => (
                              <span key={index} className="px-2 py-1 bg-[#333333] text-gray-300 text-xs rounded">
                                {item}
                              </span>
                            ))}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>

                  <TabsContent value="signals" className="space-y-4">
                    <Card className="bg-[#111111] border-[#333333]">
                      <CardHeader className="flex flex-row items-center justify-between">
                        <CardTitle className="text-white">Buying Signals</CardTitle>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => copyToClipboard(JSON.stringify(analysis.buyingSignals, null, 2), 'signals')}
                        >
                          {copiedSection === 'signals' ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                        </Button>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Triggers</h4>
                          <ul className="space-y-1">
                            {analysis.buyingSignals.triggers.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Timing</h4>
                          <ul className="space-y-1">
                            {analysis.buyingSignals.timing.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Channels</h4>
                          <ul className="space-y-1">
                            {analysis.buyingSignals.channels.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>

                  <TabsContent value="recommendations" className="space-y-4">
                    <Card className="bg-[#111111] border-[#333333]">
                      <CardHeader className="flex flex-row items-center justify-between">
                        <CardTitle className="text-white">Action Plan</CardTitle>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => copyToClipboard(JSON.stringify(analysis.recommendations, null, 2), 'recommendations')}
                        >
                          {copiedSection === 'recommendations' ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                        </Button>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Prospecting Strategy</h4>
                          <ul className="space-y-1">
                            {analysis.recommendations.prospecting.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Messaging</h4>
                          <ul className="space-y-1">
                            {analysis.recommendations.messaging.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Channels</h4>
                          <ul className="space-y-1">
                            {analysis.recommendations.channels.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-purple-400 mb-2">Timing</h4>
                          <ul className="space-y-1">
                            {analysis.recommendations.timing.map((item, index) => (
                              <li key={index} className="text-sm text-gray-300">• {item}</li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>

                {/* Summary */}
                <Card className="bg-[#111111] border-[#333333]">
                  <CardHeader>
                    <CardTitle className="text-white">Executive Summary</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-300 leading-relaxed">{analysis.summary}</p>
                  </CardContent>
                </Card>
              </div>
            ) : (
              <Card className="bg-[#111111] border-[#333333]">
                <CardContent className="p-8 text-center">
                  <Users className="h-16 w-16 text-gray-600 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-white mb-2">Ready to Build Your ICP</h3>
                  <p className="text-gray-400 mb-4">
                    Enter your best customers to get AI-powered insights about your ideal customer profile.
                  </p>
                  <div className="text-sm text-gray-500">
                    <p>✓ Pattern recognition across customer data</p>
                    <p>✓ Actionable prospecting recommendations</p>
                    <p>✓ Buying signal identification</p>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}